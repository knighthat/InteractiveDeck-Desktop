/*
 * Copyright (c) 2023. Knight Hat
 * All rights reserved.
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use,copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
package me.knighthat.interactivedeck.menus;

import java.awt.Frame;
import java.io.File;
import java.util.List;
import javax.swing.*;
import me.knighthat.interactivedeck.console.Log;
import me.knighthat.interactivedeck.file.Profile;
import me.knighthat.interactivedeck.menus.component.ibutton.IButton;
import me.knighthat.interactivedeck.menus.component.plist.ProfilesComboBox;
import me.knighthat.interactivedeck.profile.Profiles;
import me.knighthat.interactivedeck.task.BashExecutor;
import me.knighthat.interactivedeck.task.GotoPage;
import me.knighthat.interactivedeck.task.Task;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

/**
 *
 * @author knighthat
 */
public class TaskManagerMenu extends javax.swing.JDialog {

    /**
     * Creates new form TaskManagement
     */
    public TaskManagerMenu(@NotNull Frame parent, @NotNull IButton button, @NotNull ProfilesComboBox pList) {
        super(parent, false);
        super.getRootPane().setWindowDecorationStyle( JRootPane.NONE );
        super.setUndecorated( true );

        this.button = button;
        this.pList = pList;

        initComponents();

        Task task = button.task();
        if (task instanceof BashExecutor executor) {
            this.scriptButton.setSelected( true );
            this.scriptPathInput.setText( executor.path() );
        } else if (task instanceof GotoPage gotoPage) {
            this.gotoButton.setSelected( true );
            Profile profile = Profiles.get( gotoPage.target() );
            if (profile == null)
                profile = Profiles.active();
            this.profilesSelector.setSelectedItem( profile.displayName );
        }

        super.setLocationRelativeTo(parent);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        javax.swing.JLabel menuTitle = new javax.swing.JLabel();
        javax.swing.JPanel contentContainer = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        scriptButton = new javax.swing.JRadioButton();
        scriptPathInput = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        gotoButton = new javax.swing.JRadioButton();
        profilesSelector = new javax.swing.JComboBox<>();
        javax.swing.JPanel buttonsContainer = new javax.swing.JPanel();
        javax.swing.JButton createButton = new javax.swing.JButton();
        javax.swing.JButton cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(400, 280));
        setMinimumSize(new java.awt.Dimension(400, 280));

        menuTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        menuTitle.setText("Task Manager");
        menuTitle.setPreferredSize(new java.awt.Dimension(100, 30));
        getContentPane().add(menuTitle, java.awt.BorderLayout.NORTH);

        contentContainer.setLayout(new java.awt.GridBagLayout());

        jPanel1.setMaximumSize(new java.awt.Dimension(400, 100));
        jPanel1.setMinimumSize(new java.awt.Dimension(400, 100));
        jPanel1.setPreferredSize(new java.awt.Dimension(400, 100));

        scriptButton.setText("Run Script");
        scriptButton.addItemListener(event -> {
            JRadioButton source = (JRadioButton) event.getItem();
            this.buttonStateChange(source);
        });

        scriptPathInput.setMaximumSize(new java.awt.Dimension(300, 30));
        scriptPathInput.setMinimumSize(new java.awt.Dimension(300, 30));
        scriptPathInput.setPreferredSize(new java.awt.Dimension(300, 30));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scriptButton)
                    .addComponent(scriptPathInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(50, 50, 50))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scriptButton)
                .addGap(18, 18, 18)
                .addComponent(scriptPathInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50))
        );

        contentContainer.add(jPanel1, new java.awt.GridBagConstraints());

        jPanel2.setMaximumSize(new java.awt.Dimension(400, 100));
        jPanel2.setMinimumSize(new java.awt.Dimension(400, 100));
        jPanel2.setPreferredSize(new java.awt.Dimension(400, 100));

        gotoButton.setText("Go To Page");
        gotoButton.addItemListener(event -> {
            JRadioButton source = (JRadioButton) event.getItem();
            this.buttonStateChange(source);
        });

        profilesSelector.setModel(this.getNames());
        profilesSelector.setLightWeightPopupEnabled(false);
        profilesSelector.setMaximumSize(new java.awt.Dimension(300, 30));
        profilesSelector.setMinimumSize(new java.awt.Dimension(300, 30));
        profilesSelector.setPreferredSize(new java.awt.Dimension(300, 30));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(profilesSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gotoButton))
                .addGap(50, 50, 50))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(gotoButton)
                .addGap(18, 18, 18)
                .addComponent(profilesSelector, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        contentContainer.add(jPanel2, gridBagConstraints);

        getContentPane().add(contentContainer, java.awt.BorderLayout.CENTER);

        buttonsContainer.setMaximumSize(new java.awt.Dimension(400, 50));
        buttonsContainer.setMinimumSize(new java.awt.Dimension(400, 50));
        buttonsContainer.setPreferredSize(new java.awt.Dimension(400, 50));
        java.awt.FlowLayout flowLayout1 = new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 20, 15);
        flowLayout1.setAlignOnBaseline(true);
        buttonsContainer.setLayout(flowLayout1);

        createButton.setText("OK");
        createButton.setMaximumSize(new java.awt.Dimension(80, 25));
        createButton.setMinimumSize(new java.awt.Dimension(80, 25));
        createButton.setPreferredSize(new java.awt.Dimension(80, 25));
        createButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                okButtonClicked(evt);
            }
        });
        buttonsContainer.add(createButton);

        cancelButton.setText("Cancel");
        cancelButton.setMaximumSize(new java.awt.Dimension(80, 25));
        cancelButton.setMinimumSize(new java.awt.Dimension(80, 25));
        cancelButton.setPreferredSize(new java.awt.Dimension(80, 25));
        cancelButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cancelButtonMouseClicked(evt);
            }
        });
        buttonsContainer.add(cancelButton);

        getContentPane().add(buttonsContainer, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_okButtonClicked
        Task task = null;
        
        if (this.gotoButton.isSelected())
            task = createGotoPageTask();
        if (this.scriptButton.isSelected())
            task = createBashExecutorTask();
        
        this.button.task(task);
        
        finish();
    }//GEN-LAST:event_okButtonClicked

    private void cancelButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelButtonMouseClicked
        finish();
    }//GEN-LAST:event_cancelButtonMouseClicked
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton gotoButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JComboBox<String> profilesSelector;
    private javax.swing.JRadioButton scriptButton;
    private javax.swing.JTextField scriptPathInput;
    // End of variables declaration//GEN-END:variables
    private @NotNull IButton button;
    private @NotNull ProfilesComboBox pList;
    
    private void finish() {
        this.setVisible(false);
    }
    
    private void buttonStateChange(@NotNull JRadioButton source) {
        if (source.isSelected()) {
            if (source == scriptButton ) {
                this.scriptPathInput.setEnabled(true);
                this.profilesSelector.setEnabled(false);
                this.gotoButton.setSelected(false);
            } else if (source == gotoButton) {
                this.profilesSelector.setEnabled(true);
                this.scriptPathInput.setEnabled(false);
                this.scriptButton.setSelected(false);
            }
        } else {
            if (source == scriptButton ) {
                this.scriptPathInput.setEditable(false);
            } else if (source == gotoButton) {
                this.profilesSelector.setEditable(false);
            }
        }
    }

    private @Nullable Task createBashExecutorTask() {
        String filePath = this.scriptPathInput.getText();
        if (filePath.isBlank()) return null;

        File file = new File( filePath );
        if (!file.exists()) {
            Log.err("File \"" + file.getAbsolutePath() + "\" does NOT exist!");
            return null;
        }
        return  new BashExecutor( file );
    }

    private @Nullable Task createGotoPageTask() {
        String pName = (String) this.profilesSelector.getSelectedItem();

        Task task = null;
        for (Profile profile : Profiles.list())
            if (profile.displayName.equals( pName ))
                task = new GotoPage( profile.uuid() );

        return task;
    }

    private @NotNull ComboBoxModel<String> getNames() {
        List<Profile> profiles = Profiles.list();
        String[] names = new String[profiles.size() - 1];


        int index = 0;
        for (Profile profile : profiles) {
            if (this.button.profile().equals( profile ))
                continue;
            names[index] = profile.displayName;
            index++;
        }

        return new DefaultComboBoxModel<>(names);
    }
}
