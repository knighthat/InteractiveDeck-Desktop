/*
 * Copyright (c) 2023. Knight Hat
 * All rights reserved.
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use,copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
package me.knighthat.interactivedeck.menus.modifier;

import java.awt.*;
import me.knighthat.interactivedeck.component.ibutton.IButton;
import me.knighthat.interactivedeck.component.input.HexColorTextField;
import me.knighthat.interactivedeck.utils.ColorUtils;
import org.jetbrains.annotations.NotNull;
/**
 *
 * @author knighthat
 */
public class IconModifierPanel extends javax.swing.JPanel {

    /**
     * Creates new form IconModifierPanel
     */
    public IconModifierPanel() {
        initComponents();
    }
    
    public IconModifierPanel(@NotNull IButton selected) {
        this();
        this.selected = selected;
        updateInputColors();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        javax.swing.JLabel fgLabel = new javax.swing.JLabel();
        javax.swing.JLabel bgLabel = new javax.swing.JLabel();
        bgInput = new me.knighthat.interactivedeck.component.input.HexColorTextField();
        fgInput = new me.knighthat.interactivedeck.component.input.HexColorTextField();

        setBackground(new java.awt.Color(36, 36, 36));
        setMaximumSize(new java.awt.Dimension(250, 489));
        setMinimumSize(new java.awt.Dimension(250, 489));
        java.awt.GridBagLayout layout = new java.awt.GridBagLayout();
        layout.columnWidths = new int[] {210};
        setLayout(layout);

        fgLabel.setForeground(new java.awt.Color(255, 255, 255));
        fgLabel.setText("Foreground");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        add(fgLabel, gridBagConstraints);

        bgLabel.setForeground(new java.awt.Color(255, 255, 255));
        bgLabel.setText("Background");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        add(bgLabel, gridBagConstraints);

        bgInput.setMaximumSize(new java.awt.Dimension(210, 40));
        bgInput.setMinimumSize(new java.awt.Dimension(210, 40));
        bgInput.setPreferredSize(new java.awt.Dimension(210, 40));
        bgInput.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                inputLostFocusEvent(evt);
            }
        });
        bgInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                inputEnterPressedEvent(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(bgInput, gridBagConstraints);

        fgInput.setMaximumSize(new java.awt.Dimension(210, 40));
        fgInput.setMinimumSize(new java.awt.Dimension(210, 40));
        fgInput.setPreferredSize(new java.awt.Dimension(210, 40));
        fgInput.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                inputLostFocusEvent(evt);
            }
        });
        fgInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                inputEnterPressedEvent(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 40, 0);
        add(fgInput, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void inputLostFocusEvent(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_inputLostFocusEvent
        this.applyColor( evt.getSource() );
    }//GEN-LAST:event_inputLostFocusEvent

    private void inputEnterPressedEvent(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputEnterPressedEvent
        if (evt.getKeyCode() != 10) return;
        this.applyColor( evt.getSource() );
    }//GEN-LAST:event_inputEnterPressedEvent


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private HexColorTextField bgInput;
    private HexColorTextField fgInput;
    // End of variables declaration//GEN-END:variables
    private @NotNull IButton selected;

    private void updateInputColors() {
        Color background = selected.background();
        this.updateColor( this.bgInput, background );

        Color foreground = selected.foreground();
        this.updateColor( this.fgInput, foreground );
    }

    private void updateColor(@NotNull HexColorTextField target, @NotNull Color color) {
        Color contrast = ColorUtils.getContrast( color );
        String bgHex = ColorUtils.toHex( color );
        target.setBackground( color );
        target.setForeground( contrast );
        target.setText( bgHex );
    }

    private void applyColor(@NotNull Object source) {
        if (!( source instanceof HexColorTextField input ))
            return;

        String hexCode = input.getText();
        // TODO Notify users
        if (hexCode.length() < 7) return;

        Color color = ColorUtils.fromHex( hexCode );
        if (input == bgInput) {
            this.selected.background(color);
        } else {
            this.selected.foreground(color);
        }

        updateInputColors();
    }
}
