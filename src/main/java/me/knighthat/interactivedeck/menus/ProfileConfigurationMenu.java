/*
 * Copyright (c) 2023. Knight Hat
 * All rights reserved.
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use,copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
package me.knighthat.interactivedeck.menus;

import javax.swing.JRootPane;
import javax.swing.SpinnerNumberModel;
import me.knighthat.interactivedeck.connection.request.Request;
import me.knighthat.interactivedeck.connection.request.UpdateRequest;
import me.knighthat.interactivedeck.connection.wireless.WirelessSender;
import me.knighthat.interactivedeck.file.Profile;
import me.knighthat.interactivedeck.profile.Profiles;
import me.knighthat.interactivedeck.utils.ColorUtils;
import org.jetbrains.annotations.NotNull;

/**
 *
 * @author knighthat
 */
public class ProfileConfigurationMenu extends javax.swing.JDialog {

    /**
     * Creates new form ProfileConfigurationMenu
     */
    public ProfileConfigurationMenu(java.awt.Frame parent) {
        super(parent, false);
        
        this.profile = Profiles.active();
        
        super.getRootPane().setWindowDecorationStyle( JRootPane.NONE );
        super.setUndecorated( true );
        
        initComponents();
        
        super.setLocationRelativeTo(parent);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        javax.swing.JLabel menuTitle = new javax.swing.JLabel();
        javax.swing.JPanel contentContainer = new javax.swing.JPanel();
        javax.swing.JLabel displayNameLabel = new javax.swing.JLabel();
        displayNameInput = new javax.swing.JTextField(this.profile.displayName);
        javax.swing.JLabel columnsLabel = new javax.swing.JLabel();
        columnsSpinner = new javax.swing.JSpinner();
        javax.swing.JLabel rowsLabel = new javax.swing.JLabel();
        rowsSpinner = new javax.swing.JSpinner();
        javax.swing.JLabel gapLabel = new javax.swing.JLabel();
        gapSpinner = new javax.swing.JSpinner();
        javax.swing.JPanel buttonContainer = new javax.swing.JPanel();
        javax.swing.JButton saveButton = new javax.swing.JButton();
        javax.swing.JButton cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setAutoRequestFocus(false);
        setBackground(new java.awt.Color(51, 51, 51));
        setForeground(new java.awt.Color(51, 51, 51));
        setMaximumSize(new java.awt.Dimension(300, 400));
        setMinimumSize(new java.awt.Dimension(300, 400));
        setPreferredSize(new java.awt.Dimension(300, 400));
        setResizable(false);

        menuTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        menuTitle.setText("Profile Configuration");
        menuTitle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        menuTitle.setMaximumSize(new java.awt.Dimension(200, 30));
        menuTitle.setMinimumSize(new java.awt.Dimension(200, 30));
        menuTitle.setOpaque(true);
        menuTitle.setPreferredSize(new java.awt.Dimension(200, 30));
        getContentPane().add(menuTitle, java.awt.BorderLayout.NORTH);

        contentContainer.setMaximumSize(new java.awt.Dimension(200, 50));
        contentContainer.setMinimumSize(new java.awt.Dimension(200, 50));
        contentContainer.setPreferredSize(new java.awt.Dimension(200, 50));
        contentContainer.setLayout(new java.awt.GridBagLayout());

        displayNameLabel.setText("Display Name");
        displayNameLabel.setMaximumSize(new java.awt.Dimension(150, 20));
        displayNameLabel.setMinimumSize(new java.awt.Dimension(150, 20));
        displayNameLabel.setPreferredSize(new java.awt.Dimension(150, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        contentContainer.add(displayNameLabel, gridBagConstraints);

        displayNameInput.setPreferredSize(new java.awt.Dimension(150, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        contentContainer.add(displayNameInput, gridBagConstraints);

        columnsLabel.setText("Columns");
        columnsLabel.setMaximumSize(new java.awt.Dimension(150, 20));
        columnsLabel.setMinimumSize(new java.awt.Dimension(150, 20));
        columnsLabel.setPreferredSize(new java.awt.Dimension(150, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        contentContainer.add(columnsLabel, gridBagConstraints);

        SpinnerNumberModel cModel = new SpinnerNumberModel(this.profile.column(), 1, 6, 1);
        columnsSpinner.setModel(cModel);
        columnsSpinner.getEditor().getComponent(0).setBackground(ColorUtils.DEFAULT_DARK);
        columnsSpinner.setPreferredSize(new java.awt.Dimension(150, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        contentContainer.add(columnsSpinner, gridBagConstraints);

        rowsLabel.setText("Rows");
        rowsLabel.setMaximumSize(new java.awt.Dimension(150, 20));
        rowsLabel.setMinimumSize(new java.awt.Dimension(150, 20));
        rowsLabel.setPreferredSize(new java.awt.Dimension(150, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        contentContainer.add(rowsLabel, gridBagConstraints);

        SpinnerNumberModel rModel = new SpinnerNumberModel(this.profile.row(), 1, 4, 1);
        rowsSpinner.setModel(rModel);
        rowsSpinner.getEditor().getComponent(0).setBackground(ColorUtils.DEFAULT_DARK);
        rowsSpinner.setPreferredSize(new java.awt.Dimension(150, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        contentContainer.add(rowsSpinner, gridBagConstraints);

        gapLabel.setText("Gap");
        gapLabel.setMaximumSize(new java.awt.Dimension(150, 20));
        gapLabel.setMinimumSize(new java.awt.Dimension(150, 20));
        gapLabel.setPreferredSize(new java.awt.Dimension(150, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        contentContainer.add(gapLabel, gridBagConstraints);

        SpinnerNumberModel gModel = new SpinnerNumberModel(this.profile.gap(), 0, 10, 1);
        gapSpinner.setModel(gModel);
        gapSpinner.setPreferredSize(new java.awt.Dimension(150, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        contentContainer.add(gapSpinner, gridBagConstraints);

        getContentPane().add(contentContainer, java.awt.BorderLayout.CENTER);

        buttonContainer.setMaximumSize(new java.awt.Dimension(200, 50));
        buttonContainer.setMinimumSize(new java.awt.Dimension(200, 50));
        buttonContainer.setPreferredSize(new java.awt.Dimension(200, 50));
        java.awt.FlowLayout flowLayout1 = new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 20, 15);
        flowLayout1.setAlignOnBaseline(true);
        buttonContainer.setLayout(flowLayout1);

        saveButton.setText("save");
        saveButton.setMaximumSize(new java.awt.Dimension(80, 25));
        saveButton.setMinimumSize(new java.awt.Dimension(80, 25));
        saveButton.setPreferredSize(new java.awt.Dimension(80, 25));
        saveButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saveButtonMouseClicked(evt);
            }
        });
        buttonContainer.add(saveButton);

        cancelButton.setText("Cancel");
        cancelButton.setMaximumSize(new java.awt.Dimension(80, 25));
        cancelButton.setMinimumSize(new java.awt.Dimension(80, 25));
        cancelButton.setPreferredSize(new java.awt.Dimension(80, 25));
        cancelButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cancelButtonMouseClicked(evt);
            }
        });
        buttonContainer.add(cancelButton);

        getContentPane().add(buttonContainer, java.awt.BorderLayout.PAGE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelButtonMouseClicked
        finish();
    }//GEN-LAST:event_cancelButtonMouseClicked

    private void saveButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveButtonMouseClicked
        String newDisplayName = this.displayNameInput.getText();
        if (!newDisplayName.isBlank())
            this.profile.displayName = newDisplayName;
        
        int newColumns = (int) this.columnsSpinner.getValue();
        newColumns = newColumns < 1 ? 1 : Math.min(newColumns, 6);
        if (newColumns != this.profile.column())
            this.profile.column(newColumns);
                
        int newRows = (int) this.rowsSpinner.getValue();
        newRows = newRows < 1 ? 1 : Math.min(newRows, 4);
        if (newRows != this.profile.row())
            this.profile.row(newRows);
                
        int newGap = (int ) this.gapSpinner.getValue();
        newGap = newGap < 0 ? 0 : Math.min(newGap, 10);
        if (newGap != this.profile.gap())
            this.profile.gap(newGap);
        
        ((MainMenu) super.getOwner()).updateButtons();
        
        Request request = new UpdateRequest(this.profile);
        WirelessSender.send(request);
        
        finish();
    }//GEN-LAST:event_saveButtonMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner columnsSpinner;
    private javax.swing.JTextField displayNameInput;
    private javax.swing.JSpinner gapSpinner;
    private javax.swing.JSpinner rowsSpinner;
    // End of variables declaration//GEN-END:variables

    private final @NotNull Profile profile;
    
    private void finish() {
        this.setVisible(false);
    }
}
